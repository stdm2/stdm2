.. _doc_recipes_how_to_create:

Recipes
===============================

.. toctree::
   :maxdepth: 2
   :name: recipes-how-to-create

What are STDM Cookbook Recipes?
------------------------------------
STDM cookbook recipes are small Python programs, with example code samples to get you started on the framework, and give you in-depth knowledge.


How do you create STDM Cookbook Recipes?
-------------------------------------------

* Check on :ref:`doc_community_how_to_contribute`

* Check on `QGIS API Reference <https://qgis.org/pyqgis/3.0/>`_ and `PyQGIS Cookbook <https://docs.qgis.org/3.4/en/docs/pyqgis_developer_cookbook/index.html/>`_ 

* Check on `QGIS Coding Standards <https://docs.qgis.org/3.4/en/docs/developers_guide/codingstandards.html/>`_

* Select an abstract functionality that you want to add as a recipe.

* Validate the recipe through :ref:`doc_unittests_how_to_create` 

* You can now write the STDM recipe.

* Document the STDM recipe :ref:`doc_community_guidelines_code` 


Examples
--------------------------------


Creating Vector Layers
................................

There are several ways to generate a vector layer dataset:

- The ``QgsVectorFileWriter`` class: A convenient class for writing vector files to disk, using either a 
  static call to ``writeAsVectorFormat()`` which saves the whole vector layer or creating an instance of the 
  class and issue calls to ``addFeature()``. This class supports all the vector formats that OGR supports 
  (``GeoPackage, Shapefile, GeoJSON, KML`` and others).

- The ``QgsVectorLayer`` class: instantiates a data provider that interprets the supplied path (url) of the 
  data source to connect to and access the data. It can be used to create temporary, memory-based layers (``memory``) 
  and connect to OGR datasets (``ogr``), databases (``postgres, spatialite, mysql, mssql``) and more 
  (``wfs, gpx, delimitedtextâ€¦``).


* From an instance of QgsVectorFileWriter

.. code-block::
    :caption: Creating Vector Layers
    :name: create_vectorfilewriter.py

    # Write to a GeoPackage (default)
    error = QgsVectorFileWriter.writeAsVectorFormat(layer, "/path/to/folder/my_data", "")
    if error[0] == QgsVectorFileWriter.NoError:
        print("success!")

    # Write to an ESRI Shapefile format dataset using UTF-8 text encoding
    error = QgsVectorFileWriter.writeAsVectorFormat(layer, "/path/to/folder/my_esridata",
                                                    "UTF-8", driverName="ESRI Shapefile")
    if error[0] == QgsVectorFileWriter.NoError:
        print("success again!")


*  From an instance of QgsVectorLayer

.. code-block::
    :caption: Creating Vector Layers
    :name: create_vectorlayer.py

    from qgis.PyQt.QtCore import QVariant

    # define fields for feature attributes. A QgsFields object is needed
    fields = QgsFields()
    fields.append(QgsField("first", QVariant.Int))
    fields.append(QgsField("second", QVariant.String))

    """ create an instance of vector file writer, which will create the vector file.
    Arguments:
    1. path to new file (will fail if exists already)
    2. encoding of the attributes
    3. field map
    4. geometry type - from WKBTYPE enum
    5. layer's spatial reference (instance of
    QgsCoordinateReferenceSystem) - optional
    6. driver name for the output file """

    writer = QgsVectorFileWriter("my_shapes.shp", "UTF-8", fields, QgsWkbTypes.Point, driverName="ESRI Shapefile")

    if writer.hasError() != QgsVectorFileWriter.NoError:
        print("Error when creating shapefile: ",  w.errorMessage())

    # add a feature
    fet = QgsFeature()

    fet.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(10,10)))
    fet.setAttributes([1, "text"])
    writer.addFeature(fet)

    # delete the writer to flush features to disk
    del writer


.. history
.. authors
.. license