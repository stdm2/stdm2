.. _doc_community_guidelines_code:


Coding Guidelines
==================

Coding must follow :pep:`8` standards. I implore you to read these guidelines with regard to imports, 
use of spaces instead of tabs, class names, function and method names, maximum line length etc. 
Please enforce these guidelines when refactoring code:

* Use 4 spaces per indentation level.

* Limit all lines to a maximum of 79 characters.

* Surround top-level function and class definitions with two blank lines.

* Code in the core Python distribution should always use UTF-8 (Python 3).

* Imports should usually be on separate lines and should be grouped in the following order:
  Please adhere to the following import rules:

   - Do not use * to import everything e.g. from PyQt4.QtGui import *
   - Either import the individual module names e.g. from PyQt4.QtGui import QWidget 
   - Import the whole package and use the namespace to reference a module such as:

  .. code-block:: python

    from PyQt4 import QtGui
    Widget = QtGui.QWidget


  Imports should be made in the following order:

    -    Standard library/Core Python imports e.g. import sys
    -    Third party imports e.g. from PyQt4.QtCore import QObject
    -    Local application/library specific imports imports e.g. from data import Connection

* Module level "dunders" (i.e. names with two leading and two trailing underscores) such as ``__all__, __author__, __version__,`` etc. 
  It should be placed after the module docstring but before any import statements except ``from __future__`` imports.

* Avoid extraneous whitespace in the following situations:

    - Immediately inside parentheses, brackets or braces.
    - Between a trailing comma and a following close parenthesis.
    - Immediately before a comma, semicolon, or colon
    - Immediately before the open parenthesis that starts an indexing or slicing:
    - More than one space around an assignment (or other) operator to align it with another.

* Trailing commas are usually optional, except they are mandatory when making a tuple of one element.

* Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!

* Conventions for writing good documentation strings (a.k.a. "docstrings") are immortalized in `PEP 257 <https://www.python.org/dev/peps/pep-0257/>`_.

* Write docstrings for modules, functions, classes, and methods.  Docstrings can be omitted for special methods ``(e.g. __init__() or __str__())`` where the
  meaning is obvious.

* Always decide whether a class's methods and instance variables should be public or non-public.

* Ensure that each module file contains the following header information with a brief narrative of what the module does. See an example below:

::

 # -*- coding: utf-8 -*-
 """
 /***************************************************************************
 Name                 : Document Viewer
 Description          : GUI classes for managing and viewing supporting
                        documents.
 Date                 : 8/September/2014
 copyright            : (C) 2014 by UN-Habitat and implementing partners.
                        See the accompanying file CONTRIBUTORS.txt in the root
 email                : stdm@unhabitat.org
  ***************************************************************************/
 
 /***************************************************************************
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
  *   the Free Software Foundation; either version 2 of the License, or     *
  *   (at your option) any later version.                                   *
  *                                                                         *
  ***************************************************************************/

* Don't put your name in the code you contribute; git provides enough
  metadata to identify author of the code.
  See `Setting your username in git <https://help.github.com/articles/setting-your-username-in-git/>`_ for
  setup instructions.

* Doc strings and comments
  All code should be self-documenting. Please take special note and follow these PEP guidelines and sphinx documents:

    - http://www.python.org/dev/peps/pep-0287/
    - http://sphinx-doc.org/markup/desc.html#info-field-lists
    - http://thomas-cokelaer.info/tutorials/sphinx/docstring_python.html

  The following specific guidelines also apply:

    - Docstrings must be triple quoted with “””
    - Inline comments should start with a # and a single space
    - Comments should be complete sentences ending with a full stop/period

  Example:

::

 def absolute_document_path(self, document_widget):
    """
    Build the absolute document path using info from the document widget.
    :param document_widget: Instance of document widget.
    :type document_widget: DocumentWidget
    :return: Absolute path of the supporting document.
    :rtype: str
    """

* Annotating API changes and additions
  Whenever you add or change a module, class, function or method, you should annotate it accordingly. The method 
  for doing this is described on the Sphinx paragraph markup page. Here are a couple of examples:

    -  Adding a new module

::

 “””Mapping function utilities.
 
 .. versionadded:: 1.2
 “””


    - Adding a new method to a class

::

 """Return user-friendly column name.
 
 .. versionadded:: 1.2
 """

* Strings and internationalization

    - Simple strings in source code should be quoted with **'**
    
    - All strings should be internationalization enabled. Please see:

        * `PyQT4 il8n <http://pyqt.sourceforge.net/Docs/PyQt4/i18n.html>`_
    
        * `Linguist Manual <http://doc.qt.io/qt-4.8/linguist-manual.html>`_